{"version":3,"sources":["webpack:///../menu-extension/src/browser/menu-extension-contribution.ts","webpack:///../menu-extension/src/browser/menu-extension-frontend-module.ts","webpack:///util (ignored)","webpack:///util (ignored)?467b"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,oHAA2I;AAC3I,qGAAuC;AAEvC,IAAI,UAAU,GAAG,mBAAO,CAAC,2DAAY,CAAC;AAEtC,IAAM,cAAc,GAAY;IAC5B,EAAE,EAAE,iBAAiB;IACrB,KAAK,EAAE,SAAS;CACnB,CAAC;AACF,IAAM,eAAe,GAAY;IAC7B,EAAE,EAAE,kBAAkB;IACtB,KAAK,EAAE,SAAS;CACnB,CAAC;AAIF;IAAA;IAgBA,CAAC;IAfG,qDAAgB,GAAhB,UAAiB,QAAyB;QACtC,QAAQ,CAAC,eAAe,CAAC,cAAc,EAAE;YACrC,OAAO,EAAE;gBACL,UAAU,CAAC,IAAI,CAAC,UAAC,GAAQ,EAAE,KAAU;oBACjC,KAAK,CAAC,OAAO,CAAC,UAAC,IAAS,IAAK,cAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAjB,CAAiB,CAAC;gBACnD,CAAC,CAAC;YACN,CAAC;SACJ,CAAC,CAAC;QACH,QAAQ,CAAC,eAAe,CAAC,eAAe,EAAE;YACtC,OAAO,EAAE;gBACL,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;YACjD,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAdQ,0BAA0B;QADtC,sBAAU,EAAE;OACA,0BAA0B,CAgBtC;IAAD,iCAAC;CAAA;AAhBY,gEAA0B;AAmBvC;IAAA;IAeA,CAAC;IAdG,+CAAa,GAAb,UAAc,KAAwB;QAClC,IAAM,eAAe,YAAO,sBAAa,GAAE,cAAc,EAAC,CAAC;QAC3D,KAAK,CAAC,eAAe,CAAC,eAAe,EAAE,SAAS,EAAE;YAC9C,KAAK,EAAE,GAAG;SACb,CAAC,CAAC;QACH,KAAK,CAAC,kBAAkB,CAAC,eAAe,EAAE;YACtC,SAAS,EAAE,cAAc,CAAC,EAAE;YAC5B,KAAK,EAAE,GAAG;SACb,CAAC,CAAC;QACH,KAAK,CAAC,kBAAkB,CAAC,eAAe,EAAE;YACtC,SAAS,EAAE,eAAe,CAAC,EAAE;YAC7B,KAAK,EAAE,GAAG;SACb,CAAC,CAAC;IACP,CAAC;IAdQ,uBAAuB;QADnC,sBAAU,EAAE;OACA,uBAAuB,CAenC;IAAD,8BAAC;CAAA;AAfY,0DAAuB;;;;;;;;;;;;;;;ACpCpC;;GAEG;AACH,qGAA4C;AAC5C,6JAAoG;AACpG,oHAA8E;AAE9E,kBAAe,IAAI,2BAAe,CAAC,cAAI;IAEnC,4GAA4G;IAC5G,IAAI,CAAC,4BAAmB,CAAC,CAAC,EAAE,CAAC,wDAA0B,CAAC,CAAC;IACzD,IAAI,CAAC,yBAAgB,CAAC,CAAC,EAAE,CAAC,qDAAuB,CAAC,CAAC;AACvD,CAAC,CAAC,CAAC;;;;;;;;;;;;ACZH,e;;;;;;;;;;;ACAA,e","file":"27.bundle.js","sourcesContent":["\nimport { Command, CommandContribution, CommandRegistry, MAIN_MENU_BAR, MenuContribution, MenuModelRegistry } from '@theia/core/lib/common';\nimport { injectable } from 'inversify';\n\nlet serialport = require('serialport')\n\nconst ConnectCommand: Command = {\n    id: 'connect-command',\n    label: 'ttyUSB1'\n};\nconst ConnectCommand2: Command = {\n    id: 'connect-command2',\n    label: 'ttyUSB2'\n};\n\n\n@injectable()\nexport class ConnectCommandContribution implements CommandContribution {\n    registerCommands(commands: CommandRegistry): void {\n        commands.registerCommand(ConnectCommand, {\n            execute: () => {\n                serialport.list((err: any, ports: any) => {\n                    ports.forEach((port: any) => console.log(port))\n                })\n            }\n        });\n        commands.registerCommand(ConnectCommand2, {\n            execute: () => {\n                console.log('Sending data on /dev/ttyUSB2!');\n            }\n        });\n    }\n\n}\n\n@injectable()\nexport class ConnectMenuContribution implements MenuContribution {\n    registerMenus(menus: MenuModelRegistry): void {\n        const connectMenuPath = [...MAIN_MENU_BAR, 'connect-menu'];\n        menus.registerSubmenu(connectMenuPath, 'Connect', {\n            order: '8'\n        });\n        menus.registerMenuAction(connectMenuPath, {\n            commandId: ConnectCommand.id,\n            order: '0'\n        });\n        menus.registerMenuAction(connectMenuPath, {\n            commandId: ConnectCommand2.id,\n            order: '1'\n        });\n    }\n}\n","/**\n * Generated using theia-extension-generator\n */\nimport { ContainerModule } from 'inversify';\nimport { ConnectMenuContribution, ConnectCommandContribution } from './menu-extension-contribution';\nimport { CommandContribution, MenuContribution } from \"@theia/core/lib/common\"\n\nexport default new ContainerModule(bind => {\n\n    // Replace this line with the desired binding, e.g. \"bind(CommandContribution).to(MenuExtensionContribution)\n    bind(CommandContribution).to(ConnectCommandContribution);\n    bind(MenuContribution).to(ConnectMenuContribution);\n});\n","/* (ignored) */","/* (ignored) */"],"sourceRoot":""}